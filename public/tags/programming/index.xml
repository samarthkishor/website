<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Samarth Kishor&#39;s Homepage</title>
    <link>http://example.org/tags/programming/</link>
    <description>Recent content in programming on Samarth Kishor&#39;s Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Samarth Kishor 2020</copyright>
    <lastBuildDate>Mon, 09 Mar 2020 22:10:00 -0400</lastBuildDate>
    
	<atom:link href="http://example.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Remote Linux Process Hacking through SSH</title>
      <link>http://example.org/posts/remote_process_hacking/</link>
      <pubDate>Mon, 09 Mar 2020 22:10:00 -0400</pubDate>
      
      <guid>http://example.org/posts/remote_process_hacking/</guid>
      <description>There&amp;rsquo;s this really cool process hacking series on YouTube by Keist Zenon. He uses the programming language Common Lisp to interact with processes on his Linux machine. I tried following the tutorial on my Mac, but macOS does not have the same ptrace commands and system call interfaces as Linux so this did not work out. However, I have VirtualBox set up on my Mac with a Debian VM which I use whenever I need Linux.</description>
    </item>
    
    <item>
      <title>Interactive OCaml Development</title>
      <link>http://example.org/posts/interactive_ocaml_development/</link>
      <pubDate>Sun, 08 Mar 2020 22:06:00 -0400</pubDate>
      
      <guid>http://example.org/posts/interactive_ocaml_development/</guid>
      <description>Interactive development features are mostly found in dynamically-typed interpreted programming languages like Python or JavaScript. While OCaml is a statically-typed compiled language, it is still possible to program in an interactive style using a REPL. However, OCaml will never be quite as flexible and interactive as something like Lisp because of its greatest feature: the strong static type system.
Testing functions using the REPL One of the nicest features of OCaml is that is has both a byte-code compiler (ocamlc) and a native-code compiler (ocamlopt).</description>
    </item>
    
  </channel>
</rss>