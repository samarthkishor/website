<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Samarth&#39;s Blog</title>
    <link>https://samarthkishor.github.io/tags/python/</link>
    <description>Recent content in python on Samarth&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Samarth Kishor 2020</copyright>
    <lastBuildDate>Thu, 13 Aug 2020 13:35:00 -0400</lastBuildDate><atom:link href="https://samarthkishor.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typed APIs in Python with dataclasses and NamedTuples</title>
      <link>https://samarthkishor.github.io/posts/typed_apis_in_python/</link>
      <pubDate>Thu, 13 Aug 2020 13:35:00 -0400</pubDate>
      
      <guid>https://samarthkishor.github.io/posts/typed_apis_in_python/</guid>
      <description>Why would Python programmers ever care about types? While Python doesn&amp;rsquo;t check any types statically (before running the program), it does perform extensive run-time type checking. Checking types at run-time without any implicit casts makes the language strongly-typed and dynamically-typed, as opposed to a language like C which is weakly-typed and statically-typed. This is an important distinction, but I won&amp;rsquo;t go over the differences between strong and weak typing in this post.</description>
    </item>
    
    <item>
      <title>Three Completely Different Approaches to the FizzBuzz Problem</title>
      <link>https://samarthkishor.github.io/posts/fizzbuzz_approaches/</link>
      <pubDate>Wed, 11 Mar 2020 22:49:00 -0400</pubDate>
      
      <guid>https://samarthkishor.github.io/posts/fizzbuzz_approaches/</guid>
      <description>Here&amp;rsquo;s a solution to the classic infamous FizzBuzz problem in Python:
for i in range(1, 31): if i % 15 == 0: print(&amp;#34;FizzBuzz&amp;#34;) elif i % 3 == 0: print(&amp;#34;Fizz&amp;#34;) elif i % 5 == 0: print(&amp;#34;Buzz&amp;#34;) else: print(i) 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz This program is really simple and is probably the most common approach.</description>
    </item>
    
  </channel>
</rss>
